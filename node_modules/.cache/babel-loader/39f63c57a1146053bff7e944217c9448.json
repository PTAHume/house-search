{"ast":null,"code":"'use strict'; // In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n\n/**\n * The default register service worker function\n * @returns {AppServiceWorker}\n */\n\nimport _classCallCheck from \"C:/Users/patri/OneDrive/Documents/GitHub/React/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/patri/OneDrive/Documents/GitHub/React/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nfunction registerServiceWorker() {\n  return AppServiceWorker.getInstance();\n}\n/**\n * App Service Worker Class\n * \n * @export\n * @class AppServiceWorker\n */\n\n\nexport var AppServiceWorker = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of AppServiceWorker.\n   * \n   * @memberof AppServiceWorker\n   */\n  function AppServiceWorker() {\n    var _this = this;\n\n    _classCallCheck(this, AppServiceWorker);\n\n    this.isLocalhost = Boolean(window.location.hostname === \"localhost\" || // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" || // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n    this.installPromise = new Promise(function (resolve) {\n      return _this.installPromiseResolver = resolve;\n    });\n    this.updatePromise = new Promise(function (resolve) {\n      return _this.updatePromiseResolver = resolve;\n    });\n    this.onUpdateFound(function () {\n      return console.log(\"New content is available; please refresh.\");\n    });\n    this.onInstalled(function () {\n      return console.log(\"Content is cached for offline use.\");\n    });\n  }\n  /**\n   * Register the service worker\n   * \n   * @returns \n   * @memberof AppServiceWorker\n   */\n\n\n  _createClass(AppServiceWorker, [{\n    key: \"register\",\n    value: function register() {\n      var _this2 = this;\n\n      if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        var publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\n        if (publicUrl.origin !== window.location.origin) {\n          // Our service worker won't work if PUBLIC_URL is on a different origin\n          // from what our page is served on. This might happen if a CDN is used to\n          // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n          return;\n        }\n\n        window.addEventListener(\"load\", function () {\n          var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n          if (_this2.isLocalhost) {\n            // This is running on localhost. Lets check if a service worker still exists or not.\n            _this2.checkValidServiceWorker(swUrl); // Add some additional logging to localhost, pointing developers to the\n            // service worker/PWA documentation.\n\n\n            navigator.serviceWorker.ready.then(function () {\n              console.log(\"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://goo.gl/SC7cgQ\");\n            });\n          } else {\n            // Is not local host. Just register service worker\n            _this2.registerValidSW(swUrl);\n          }\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"registerValidSW\",\n    value: function registerValidSW(swUrl) {\n      var _this3 = this;\n\n      navigator.serviceWorker.register(swUrl).then(function (registration) {\n        registration.onupdatefound = function () {\n          var installingWorker = registration.installing;\n\n          installingWorker.onstatechange = function () {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                _this3.updatePromiseResolver();\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                _this3.installPromiseResolver();\n              }\n            }\n          };\n        };\n      }).catch(function (error) {\n        console.error(\"Error during service worker registration:\", error);\n      });\n    }\n  }, {\n    key: \"checkValidServiceWorker\",\n    value: function checkValidServiceWorker(swUrl) {\n      var _this4 = this;\n\n      // Check if the service worker can be found. If it can't reload the page.\n      fetch(swUrl).then(function (response) {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (response.status === 404 || response.headers.get(\"content-type\").indexOf(\"javascript\") === -1) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(function (registration) {\n            registration.unregister().then(function () {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          _this4.registerValidSW(swUrl);\n        }\n      }).catch(function () {\n        console.log(\"No internet connection found. App is running in offline mode.\");\n      });\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister() {\n      if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(function (registration) {\n          registration.unregister();\n        });\n      }\n    }\n  }, {\n    key: \"onInstalled\",\n    value: function onInstalled(callback) {\n      this.installPromise.then(callback).catch(console.error);\n    }\n  }, {\n    key: \"onUpdateFound\",\n    value: function onUpdateFound(callback) {\n      this.updatePromise.then(callback).catch(console.error);\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      return this.instance ? this.instance : this.instance = new this().register();\n    }\n  }]);\n\n  return AppServiceWorker;\n}();\nexport default registerServiceWorker;","map":{"version":3,"names":["registerServiceWorker","AppServiceWorker","getInstance","isLocalhost","Boolean","window","location","hostname","match","installPromise","Promise","resolve","installPromiseResolver","updatePromise","updatePromiseResolver","onUpdateFound","console","log","onInstalled","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","registerValidSW","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","fetch","response","status","headers","get","indexOf","unregister","reload","callback","instance"],"sources":["C:/Users/patri/OneDrive/Documents/GitHub/React/my-app/node_modules/react-service-worker/index.js"],"sourcesContent":["'use strict';\n\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n\n/**\n * The default register service worker function\n * @returns {AppServiceWorker}\n */\nfunction registerServiceWorker() {\n    return AppServiceWorker.getInstance()\n}\n\n/**\n * App Service Worker Class\n * \n * @export\n * @class AppServiceWorker\n */\nexport class AppServiceWorker {\n    /**\n     * Creates an instance of AppServiceWorker.\n     * \n     * @memberof AppServiceWorker\n     */\n    constructor() {\n\n        this.isLocalhost = Boolean(\n            window.location.hostname === \"localhost\" ||\n            // [::1] is the IPv6 localhost address.\n            window.location.hostname === \"[::1]\" ||\n            // 127.0.0.1/8 is considered localhost for IPv4.\n            window.location.hostname.match(\n                /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n            )\n        );\n\n        this.installPromise = new Promise(resolve => this.installPromiseResolver = resolve)\n        this.updatePromise = new Promise(resolve => this.updatePromiseResolver = resolve)\n\n        this.onUpdateFound(() => console.log(\"New content is available; please refresh.\"))\n        this.onInstalled(() => console.log(\"Content is cached for offline use.\"))\n\n    }\n    /**\n     * Register the service worker\n     * \n     * @returns \n     * @memberof AppServiceWorker\n     */\n    register() {\n        if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n            // The URL constructor is available in all browsers that support SW.\n            const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n            if (publicUrl.origin !== window.location.origin) {\n                // Our service worker won't work if PUBLIC_URL is on a different origin\n                // from what our page is served on. This might happen if a CDN is used to\n                // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n                return;\n            }\n\n            window.addEventListener(\"load\", () => {\n                const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n                if (this.isLocalhost) {\n                    // This is running on localhost. Lets check if a service worker still exists or not.\n                    this.checkValidServiceWorker(swUrl);\n\n                    // Add some additional logging to localhost, pointing developers to the\n                    // service worker/PWA documentation.\n                    navigator.serviceWorker.ready.then(() => {\n                        console.log(\n                            \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n                        );\n                    });\n                } else {\n                    // Is not local host. Just register service worker\n                    this.registerValidSW(swUrl);\n                }\n            });\n        }\n        return this\n    }\n\n    registerValidSW(swUrl) {\n\n        navigator.serviceWorker\n            .register(swUrl)\n            .then(registration => {\n\n                registration.onupdatefound = () => {\n                    const installingWorker = registration.installing;\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === \"installed\") {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a \"New content is\n                                // available; please refresh.\" message in your web app.\n                                this.updatePromiseResolver()\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // \"Content is cached for offline use.\" message.\n                                this.installPromiseResolver()\n                            }\n                        }\n                    };\n                };\n            })\n            .catch(error => {\n                console.error(\"Error during service worker registration:\", error);\n            });\n    }\n\n    checkValidServiceWorker(swUrl) {\n        // Check if the service worker can be found. If it can't reload the page.\n        fetch(swUrl)\n            .then(response => {\n                // Ensure service worker exists, and that we really are getting a JS file.\n                if (\n                    response.status === 404 ||\n                    response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n                ) {\n                    // No service worker found. Probably a different app. Reload the page.\n                    navigator.serviceWorker.ready.then(registration => {\n                        registration.unregister().then(() => {\n                            window.location.reload();\n                        });\n                    });\n                } else {\n                    // Service worker found. Proceed as normal.\n                    this.registerValidSW(swUrl);\n                }\n            })\n            .catch(() => {\n                console.log(\n                    \"No internet connection found. App is running in offline mode.\"\n                );\n            });\n    }\n\n    unregister() {\n        if (\"serviceWorker\" in navigator) {\n            navigator.serviceWorker.ready.then(registration => {\n                registration.unregister();\n            });\n        }\n    }\n\n    onInstalled(callback) {\n        this.installPromise.then(callback).catch(console.error)\n\n    }\n\n    onUpdateFound(callback) {\n        this.updatePromise.then(callback).catch(console.error)\n    }\n\n    static getInstance() {\n        return this.instance ? this.instance : this.instance = new this().register()\n    }\n}\n\nexport default registerServiceWorker;"],"mappings":"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"},"metadata":{},"sourceType":"module"}